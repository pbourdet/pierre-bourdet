version: 2.1

defaults: &defaults_pr
    working_directory: ~/pbourdet
    docker:
        - image: cimg/base:stable

defaults_deploy: &defaults_deploy
    working_directory: ~/pbourdet
    docker:
        - image: google/cloud-sdk:alpine

filter_merge: &filter_merge
    filters:
        branches:
            ignore:
                - master

only_master: &only_master
    filters:
        branches:
            only:
                - master

commands:
    check_sha_front:
        steps:
            - run:
                  name: Check front-end sha
                  command: |
                      if [ "$CURRENT_FRONT_SHA" = "$PREVIOUS_FRONT_SHA" ]; then
                        echo 'THE FRONTEND SOURCE CODE HAS NOT BEEN MODIFIED. THE CI WILL NOT RUN'
                        circleci-agent step halt
                      fi;
    check_sha_back:
        steps:
            - run:
                  name: Check back-end sha
                  command: |
                      if [ "$CURRENT_BACK_SHA" = "$PREVIOUS_BACK_SHA" ]; then
                        echo 'THE BACKEND SOURCE CODE HAS NOT BEEN MODIFIED. THE CI WILL NOT RUN'
                        circleci-agent step halt
                      fi;
    install_compose:
        steps:
            - when:
                  condition:
                      equal: [ master, << pipeline.git.branch >> ]
                  steps:
                      - run:
                            name: Install docker-compose
                            command: apk add docker-compose
            - unless:
                  condition:
                      equal: [ master, << pipeline.git.branch >> ]
                  steps:
                      - run:
                            name: Install docker-compose
                            environment:
                                COMPOSE_VERSION: '1.29.2'
                            command : |
                                curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
                                chmod +x ~/docker-compose
                                sudo mv ~/docker-compose /usr/local/bin/docker-compose
    login_docker:
        steps:
            - run:
                  name: Login to docker as Artifact registry service account
                  command: echo $GCP_ARTIFACT_ACCOUNT_KEY | docker login -u _json_key --password-stdin https://$GCP_REGION-docker.pkg.dev
    setup_env_vars:
        steps:
            - run:
                  name: Export shasum of directories
                  command: |
                      echo "export CURRENT_BACK_SHA=$(find ./symfony/ -type f \( -exec sha1sum "$PWD"/{} \; \) | awk '{print $1}' | sort | sha1sum | sed 's/\(.*\).../\1/')" >> $BASH_ENV
                      echo "export CURRENT_FRONT_SHA=$(find ./frontend-react/ -type f \( -exec sha1sum "$PWD"/{} \; \) | awk '{print $1}' | sort | sha1sum | sed 's/\(.*\).../\1/')" >> $BASH_ENV
            - when:
                  condition:
                      equal: [ master, << pipeline.git.branch >> ]
                  steps:
                      - run:
                            name: Export images artifact registry URL
                            command: |
                                echo "export FRONT_IMAGE_URL=$GCP_REGION-docker.pkg.dev/$GCP_PROJECT_NAME/react-prod/front" >> $BASH_ENV
                                echo "export PHP_IMAGE_URL=$GCP_REGION-docker.pkg.dev/$GCP_PROJECT_NAME/symfony-prod/php" >> $BASH_ENV
                                echo "export CADDY_IMAGE_URL=$GCP_REGION-docker.pkg.dev/$GCP_PROJECT_NAME/symfony-prod/caddy" >> $BASH_ENV
    build_front:
        steps:
            - when:
                  condition:
                      equal: [ master, << pipeline.git.branch >> ]
                  steps:
                      - run:
                            name: Build react production image
                            command: docker build -t "$FRONT_IMAGE_URL" ./frontend-react/.
                      - run:
                          name: Push react image to artifact registry
                          command: docker push "$FRONT_IMAGE_URL"
            - unless:
                  condition:
                      equal: [ master, << pipeline.git.branch >> ]
                  steps:
                      - run:
                            name: Build React testing image
                            command : docker-compose -f docker-compose-test-react.yaml up -d
    build_back:
        steps:
            - when:
                  condition:
                      equal: [ master, << pipeline.git.branch >> ]
                  steps:
                      - run:
                            name: Retrieve production secret key
                            command: |
                                echo $GCP_CLOUDSTORAGE_ACCOUNT_KEY | gcloud auth activate-service-account --key-file=-
                                gsutil cp gs://$GCP_PROJECT_NAME.appspot.com/secret-key-prod/prod.decrypt.private.php symfony/config/secrets/prod/
                      - run:
                            name: Build symfony and caddy production images
                            command: docker-compose -f docker-compose.prod.yaml build
                      - run:
                            name: Push images to artifact registry
                            command: |
                                docker image tag pbourdet/symfony-prod "$PHP_IMAGE_URL"
                                docker image tag pbourdet/caddy-prod "$CADDY_IMAGE_URL"
                                docker image push "$CADDY_IMAGE_URL"
                                docker image push "$PHP_IMAGE_URL"
            - unless:
                  condition:
                      equal: [ master, << pipeline.git.branch >> ]
                  steps:
                      - run:
                            name: Build Symfony testing image
                            command: docker-compose -f docker-compose-test-symfony.yaml up -d
    test_back:
        steps:
            - run:
                  name: Install dev dependencies and prepare database
                  command: |
                      docker-compose exec symfony composer install
                      docker-compose exec symfony bin/console doctrine:migration:migrate --no-interaction
                      docker-compose exec symfony bin/console doctrine:fixtures:load --no-interaction
            - run:
                  name: Run YAML lint
                  command: |
                      docker-compose exec symfony ./vendor/bin/yaml-lint config/
            - run:
                  name: Run php-cs-fixer
                  command: |
                      docker-compose exec symfony ./vendor/bin/php-cs-fixer fix -v --dry-run --stop-on-violation --using-cache=no --allow-risky=yes
            - run:
                  name: Run Rector
                  command: |
                      docker-compose exec symfony ./vendor/bin/rector process src --dry-run
            - run:
                  name: Run Phpstan
                  command: docker-compose exec symfony ./vendor/bin/phpstan analyse -c phpstan.neon --memory-limit=-1
            - run:
                  name: Run PhpUnit unit tests
                  command: docker-compose exec symfony ./vendor/bin/simple-phpunit --testsuite=unit
            - run:
                  name: Install xdebug for coverage
                  command: |
                      docker-compose exec symfony apk add --no-cache --virtual .build-deps autoconf dpkg-dev dpkg file g++ gcc libc-dev pkgconf re2c
                      docker-compose exec symfony pecl install xdebug
                      docker-compose exec symfony docker-php-ext-enable xdebug
            - run:
                  name: Run mutation testing
                  command: docker-compose exec symfony ./vendor/bin/infection --threads=4 --min-msi=70
            - run:
                  name: Run PhpUnit functional tests
                  command: docker-compose exec symfony ./vendor/bin/simple-phpunit --testsuite=functional
    test_front:
        steps:
            - run:
                  name: Run eslint
                  command: docker-compose exec react yarn eslint-fix
            - run:
                  name: Run Jest tests
                  command: docker-compose exec react yarn test src/ --watchAll=false
    deploy_front:
        steps:
            - run:
                  name: Setup gcloud configuration
                  command: |
                      echo $GCP_CLOUDRUN_ACCOUNT_KEY | gcloud auth activate-service-account --key-file=-
                      gcloud config set run/region $GCP_REGION
                      gcloud config set project $GCP_PROJECT_NAME
                      gcloud config set compute/zone $GCP_ZONE
            - run:
                  name: Deploy front-end to Cloud Run
                  command: gcloud run deploy react --image "$FRONT_IMAGE_URL":latest
    deploy_back:
        steps:
            - run:
                  name: Setup gcloud configuration
                  command: |
                      gcloud config set run/region $GCP_REGION
                      gcloud config set project $GCP_PROJECT_NAME
                      gcloud config set compute/zone $GCP_ZONE
            - run:
                  name: Setup Compute SSH connection
                  command: |
                      echo $GCP_COMPUTE_ACCOUNT_KEY | gcloud auth activate-service-account --key-file=-
                      gcloud compute config-ssh --quiet
            - run:
                  name: Pull code
                  command: gcloud compute ssh $GCP_ENGINE_INSTANCE -- "cd ${PROJECT_DIRECTORY} && sudo git pull origin master"
            - run:
                  name: Pull and tag new images
                  command: |
                      gcloud compute ssh $GCP_ENGINE_INSTANCE --command "\
                            sudo docker image pull ${CADDY_IMAGE_URL} \
                            && sudo docker image pull ${PHP_IMAGE_URL} \
                            && sudo docker image tag ${PHP_IMAGE_URL} pbourdet/symfony-prod \
                            && sudo docker image tag ${PHP_IMAGE_URL} pbourdet/workers-prod \
                            && sudo docker image tag ${CADDY_IMAGE_URL} pbourdet/caddy-prod"
            - run:
                  name: Restart containers
                  command: |
                      gcloud compute ssh $GCP_ENGINE_INSTANCE --command "\
                            sudo docker-compose -f ${PROJECT_DIRECTORY}/docker-compose.prod.yaml down --remove-orphans \
                            && sudo SERVER_NAME='api.pierre-bourdet.dev, caddy:80' CADDY_MERCURE_JWT_SECRET=${MERCURE_JWT_SECRET} POSTGRES_PASSWORD=${POSTGRES_PASSWORD} docker-compose -f ${PROJECT_DIRECTORY}/docker-compose.prod.yaml up -d \
                            && sudo docker image prune -f \
                            && sudo docker volume prune -f"
    update_sha_back:
        steps:
            - run:
                  name: Update back sha variable
                  command: |
                      curl --location --request DELETE "https://circleci.com/api/v2/project/$CIRCLECI_PROJECT_SLUG/envvar/PREVIOUS_BACK_SHA" \
                          --header "Circle-Token: $CIRCLECI_API_TOKEN"
                      curl --location --request POST "https://circleci.com/api/v2/project/$CIRCLECI_PROJECT_SLUG/envvar" \
                          --header "Circle-Token: $CIRCLECI_API_TOKEN" \
                          --header "Content-Type: application/json" \
                          --data-raw "{\"name\":\"PREVIOUS_BACK_SHA\",\"value\":\"$CURRENT_BACK_SHA\"}"
    update_sha_front:
        steps:
            - run:
                  name: Update front sha variable
                  command: |
                      curl --location --request DELETE "https://circleci.com/api/v2/project/$CIRCLECI_PROJECT_SLUG/envvar/PREVIOUS_FRONT_SHA" \
                          --header "Circle-Token: $CIRCLECI_API_TOKEN"
                      curl --location --request POST "https://circleci.com/api/v2/project/$CIRCLECI_PROJECT_SLUG/envvar" \
                          --header "Circle-Token: $CIRCLECI_API_TOKEN" \
                          --header "Content-Type: application/json" \
                          --data-raw "{\"name\":\"PREVIOUS_FRONT_SHA\",\"value\":\"$CURRENT_FRONT_SHA\"}"

jobs:
    check_pr_front:
        <<: *defaults_pr
        steps:
            - checkout
            - setup_env_vars
            - check_sha_front
            - setup_remote_docker:
                  version: 20.10.7
            - install_compose
            - build_front
            - test_front

    check_pr_back:
        <<: *defaults_pr
        steps:
            - checkout
            - setup_env_vars
            - check_sha_back
            - setup_remote_docker:
                  version: 20.10.7
            - install_compose
            - build_back
            - test_back

    deploy_prod_back:
        <<: *defaults_deploy
        steps:
            - checkout
            - setup_env_vars
            - check_sha_back
            - setup_remote_docker:
                  version: 20.10.7
            - install_compose
            - login_docker
            - build_back
            - deploy_back
            - update_sha_back

    deploy_prod_front:
        <<: *defaults_deploy
        steps:
            - checkout
            - setup_env_vars
            - check_sha_front
            - setup_remote_docker:
                  version: 20.10.7
            - install_compose
            - login_docker
            - build_front
            - deploy_front
            - update_sha_front

workflows:
    version: 2
    check:
        jobs:
            - check_pr_front:
                  <<: *filter_merge
            - check_pr_back:
                  <<: *filter_merge

    deploy:
        jobs:
            - deploy_prod_back:
                  <<: *only_master
            - deploy_prod_front:
                  <<: *only_master
